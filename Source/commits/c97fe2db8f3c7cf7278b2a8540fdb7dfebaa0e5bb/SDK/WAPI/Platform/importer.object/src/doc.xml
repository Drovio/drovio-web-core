<?xml version="1.0" encoding="UTF-8"?>
<manual library="WAPI" package="Platform" namespace="\">
  <class name="importer" abstract="">
    <info>
      <version>2.0</version>
      <build>2</build>
      <datecreated>1412166603</datecreated>
      <daterevised>1419943297</daterevised>
      <extends/>
      <implements/>
      <throws/>
      <title>Website Core Importer</title>
      <description>It is used to import all files in the system and from the web core.</description>
      <deprecated/>
    </info>
    <constants/>
    <properties>
      <scope type="public"/>
      <scope type="protected"/>
      <scope type="private">
        <prop type="string" name="vcsPath" static="true">
          <description>The core repository path.</description>
        </prop>
        <prop type="string" name="innerClassPath" static="true">
          <description>The object's inner class path.</description>
        </prop>
        <prop type="string" name="latestPath" static="true">
          <description>The web core's exported latest root folder.</description>
        </prop>
        <prop type="array" name="loaded" static="true">
          <description>All loaded classes so far.</description>
        </prop>
      </scope>
    </properties>
    <methods>
      <scope type="public">
        <method name="import" returntype="void" static="true">
          <description>Import an SDK Object from the given library and package.</description>
          <parameters>
            <parameter name="$library" type="string" defaultvalue="">
              <description>The library name.</description>
            </parameter>
            <parameter name="$package" type="string" defaultvalue="">
              <description>The package name.</description>
            </parameter>
            <parameter name="$class" type="string" defaultvalue="">
              <description>The full name of the class (including namespaces separated by "/").</description>
            </parameter>
          </parameters>
          <returndescription/>
          <throws/>
          <deprecated/>
        </method>
        <method name="incl" returntype="mixed" static="true">
          <description>Include file (doesn't throw exception...)</description>
          <parameters>
            <parameter name="$path" type="string" defaultvalue="">
              <description>The file path to include.</description>
            </parameter>
            <parameter name="$root" type="boolean" defaultvalue="">
              <description>Indicator that defines whether the path will be normalized to system's root.</description>
            </parameter>
            <parameter name="$once" type="boolean" defaultvalue="">
              <description>Include once or not.</description>
            </parameter>
          </parameters>
          <returndescription>The result of the inclusion.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="req" returntype="mixed" static="true">
          <description>Require file.
It throws an exception if the file doesn't exist.</description>
          <parameters>
            <parameter name="$path" type="string" defaultvalue="">
              <description>The file path to include.</description>
            </parameter>
            <parameter name="$root" type="boolean" defaultvalue="">
              <description>Indicator that defines whether the path will be normalized to system's root.</description>
            </parameter>
            <parameter name="$once" type="boolean" defaultvalue="">
              <description>Include once or not.</description>
            </parameter>
          </parameters>
          <returndescription>The result of the inclusion.</returndescription>
          <throws>
            <exception>Exception</exception>
          </throws>
          <deprecated/>
        </method>
        <method name="onDevelopment" returntype="boolean" static="true">
          <description>Checks whether the website is running on the Development or the Production server, based on the web url.</description>
          <parameters/>
          <returndescription>True if the server is the development platform, false otherwise.</returndescription>
          <throws/>
          <deprecated/>
        </method>
      </scope>
      <scope type="protected"/>
      <scope type="private">
        <method name="loadPackage" returntype="void" static="true">
          <description>Loads all objects in the given package.
If the package is tester, it loads the objects from the repository trunk.</description>
          <parameters>
            <parameter name="$library" type="string" defaultvalue="">
              <description>The library name.</description>
            </parameter>
            <parameter name="$package" type="string" defaultvalue="">
              <description>The package name.</description>
            </parameter>
          </parameters>
          <returndescription/>
          <throws/>
          <deprecated/>
        </method>
        <method name="checkLoaded" returntype="boolean" static="true">
          <description>Checks if a class has already been loaded.</description>
          <parameters>
            <parameter name="$library" type="string" defaultvalue="">
              <description>The library name.</description>
            </parameter>
            <parameter name="$package" type="string" defaultvalue="">
              <description>The package name.</description>
            </parameter>
            <parameter name="$class" type="string" defaultvalue="">
              <description>The class full name (including namespace).</description>
            </parameter>
          </parameters>
          <returndescription>True if the class has already been loaded, false otherwise.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="setLoaded" returntype="void" static="true">
          <description>Sets a class as loaded.</description>
          <parameters>
            <parameter name="$library" type="string" defaultvalue="">
              <description>The library name.</description>
            </parameter>
            <parameter name="$package" type="string" defaultvalue="">
              <description>The package name.</description>
            </parameter>
            <parameter name="$class" type="string" defaultvalue="">
              <description>The class full name (including namespace).</description>
            </parameter>
          </parameters>
          <returndescription/>
          <throws/>
          <deprecated/>
        </method>
        <method name="getTesterStatus" returntype="boolean" static="true">
          <description>Returns whether the user has set the given package for testing.</description>
          <parameters>
            <parameter name="$libName" type="string" defaultvalue="">
              <description>The library name.</description>
            </parameter>
            <parameter name="$packageName" type="string" defaultvalue="">
              <description>The package name.</description>
            </parameter>
          </parameters>
          <returndescription>True if the given package is in tester mode, false otherwise.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="packageStatus" returntype="boolean" static="true">
          <description>Returns whether the user has set the given package for testing.</description>
          <parameters>
            <parameter name="$package" type="string" defaultvalue="">
              <description>The merged package name.</description>
            </parameter>
          </parameters>
          <returndescription>True if the given package is in tester mode, false otherwise.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="getTesterPackages" returntype="array" static="true">
          <description>Get all tester packages.</description>
          <parameters/>
          <returndescription>An array of all packages in tester mode.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="testerStatus" returntype="string" static="true">
          <description>Returns the global tester's status value.</description>
          <parameters/>
          <returndescription>The cookie value.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="getCookie" returntype="string" static="true">
          <description>Get the value of a cookie with the given name.</description>
          <parameters>
            <parameter name="$name" type="string" defaultvalue="">
              <description>The cookie's name.</description>
            </parameter>
          </parameters>
          <returndescription>The cookie value.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="getReleaseObjectPath" returntype="string" static="true">
          <description>Gets the release object path.</description>
          <parameters>
            <parameter name="$library" type="string" defaultvalue="">
              <description>The library name.</description>
            </parameter>
            <parameter name="$package" type="string" defaultvalue="">
              <description>The package name.</description>
            </parameter>
            <parameter name="$object" type="string" defaultvalue="">
              <description>The object name (including namespace separated by "::").</description>
            </parameter>
          </parameters>
          <returndescription>The release system object path.</returndescription>
          <throws/>
          <deprecated/>
        </method>
      </scope>
    </methods>
  </class>
</manual>
