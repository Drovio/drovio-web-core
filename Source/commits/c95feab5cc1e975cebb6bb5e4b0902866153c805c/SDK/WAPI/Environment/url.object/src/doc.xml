<?xml version="1.0" encoding="UTF-8"?>
<manual library="WAPI" package="Environment" namespace="\">
  <class name="url" abstract="">
    <info>
      <version>1.1</version>
      <build>2</build>
      <datecreated>1417113184</datecreated>
      <daterevised>1449603560</daterevised>
      <extends/>
      <implements/>
      <throws/>
      <title>URL Helper and Resolver</title>
      <description>This class is a helper class for handling urls.
It is used for resolving urls for resources and redirections.</description>
      <deprecated/>
    </info>
    <constants/>
    <properties>
      <scope type="public"/>
      <scope type="protected"/>
      <scope type="private"/>
    </properties>
    <methods>
      <scope type="public">
        <method name="get" returntype="string" static="true">
          <description>Creates and returns a url with parameters in url encoding.</description>
          <parameters>
            <parameter name="$url" type="string" defaultvalue="">
              <description>The base url.</description>
            </parameter>
            <parameter name="$parameters" type="array" defaultvalue="">
              <description>An associative array of parameters as key =&amp;gt; value.</description>
            </parameter>
          </parameters>
          <returndescription>A well formed url.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="getDomain" returntype="string" static="true">
          <description>Get current domain.</description>
          <parameters/>
          <returndescription>The host domain.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="getSubDomain" returntype="string" static="true">
          <description>Gets the current navigation subdomain.</description>
          <parameters>
            <parameter name="$useOrigin" type="boolean" defaultvalue="">
              <description>Set TRUE to use origin value if exists.
It is TRUE by default.</description>
            </parameter>
          </parameters>
          <returndescription>Returns the active navigation subdomain.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="resolve" returntype="string" static="true">
          <description>Resolves a given URL given a subdomain and a page url in the framework.</description>
          <parameters>
            <parameter name="$sub" type="string" defaultvalue="">
              <description>The subdomain name.
It must be a valid name.</description>
            </parameter>
            <parameter name="$url" type="string" defaultvalue="">
              <description>The page url.
By default it's the root url ("/").</description>
            </parameter>
            <parameter name="$params" type="array" defaultvalue="">
              <description>An array of parameters as key =&amp;gt; value.</description>
            </parameter>
            <parameter name="$protocol" type="string" defaultvalue="">
              <description>The protocol to resolve the url to.
Leave empty to decide based on the server request protocol.</description>
            </parameter>
            <parameter name="$explicit" type="boolean" defaultvalue="">
              <description>If TRUE, define explicitly the subdomain.
If FALSE, www will be omitted.</description>
            </parameter>
          </parameters>
          <returndescription>The resolved url.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="resource" returntype="string" static="true">
          <description>Resolves a resource's URL for reference to the resource's domain.
The resource domain is usually the 'www'. So it is equivalent to resolve('www',...);</description>
          <parameters>
            <parameter name="$url" type="string" defaultvalue="">
              <description>The resource's URL to be resolved.</description>
            </parameter>
            <parameter name="$protocol" type="string" defaultvalue="">
              <description>The protocol to resolve the url to.
The default protocol is "http".</description>
            </parameter>
          </parameters>
          <returndescription>The resolved resource url.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="info" returntype="array" static="true">
          <description>Gets the info of the url in an array.</description>
          <parameters>
            <parameter name="$url" type="string" defaultvalue="">
              <description>The url to get the information from.
If the url is empty, get the current request url.</description>
            </parameter>
            <parameter name="$domain" type="string" defaultvalue="">
              <description>The url domain.
This is given to distinguish the subdomains on the front.
The default value is empty to get the website domain.</description>
            </parameter>
          </parameters>
          <returndescription>The url info as follows:
['url'] = The full url page.
['protocol'] = The server protocol.
['sub'] = The navigation subdomain.
['domain'] = The host domain.
['params'] = An array of all url parameters by name and value.
['referer'] = The referer value, if exists.
['origin'] = The host origin value, if exists.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="isIP" returntype="boolean" static="true">
          <description>Check if the given url is in IP format.
It includes checks for IPv4 and IPv6.</description>
          <parameters>
            <parameter name="$url" type="boolean" defaultvalue="">
              <description>The url to check.</description>
            </parameter>
          </parameters>
          <returndescription>True if url is an IP, false otherwise.</returndescription>
          <throws/>
          <deprecated/>
        </method>
      </scope>
      <scope type="protected"/>
      <scope type="private">
        <method name="isIPv4" returntype="boolean" static="true">
          <description>Check if the given url is an IPv4.</description>
          <parameters>
            <parameter name="$url" type="string" defaultvalue="">
              <description>The url to be checked.</description>
            </parameter>
          </parameters>
          <returndescription>True if it's IPv4, false otherwise.</returndescription>
          <throws/>
          <deprecated/>
        </method>
        <method name="isIPv6" returntype="boolean" static="true">
          <description>Check if the given url is an IPv6.</description>
          <parameters>
            <parameter name="$url" type="string" defaultvalue="">
              <description>The url to be checked.</description>
            </parameter>
          </parameters>
          <returndescription>True if it's IPv6, false otherwise.</returndescription>
          <throws/>
          <deprecated/>
        </method>
      </scope>
    </methods>
  </class>
</manual>
